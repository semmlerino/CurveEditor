#!/usr/bin/env python3
"""
Debug script to test what key codes are generated by numpad keys.
Run this and press numpad 2,4,6,8 to see what Qt receives.
"""

import sys

from PySide6.QtCore import Qt
from PySide6.QtGui import QKeyEvent
from PySide6.QtWidgets import QApplication, QLabel, QTextEdit, QVBoxLayout, QWidget


class KeyDebugWidget(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Numpad Key Debug")
        self.setFixedSize(600, 400)

        layout = QVBoxLayout()

        # Instructions
        info = QLabel(
            "Click in this window then press numpad keys 2, 4, 6, 8\n"
            "Try with NumLock ON and OFF\n"
            "Also try regular number keys for comparison"
        )
        layout.addWidget(info)

        # Output display
        self.output = QTextEdit()
        self.output.setReadOnly(True)
        layout.addWidget(self.output)

        self.setLayout(layout)

        # Ensure we have keyboard focus
        self.setFocusPolicy(Qt.FocusPolicy.StrongFocus)

    def keyPressEvent(self, event: QKeyEvent):
        key = event.key()
        modifiers = event.modifiers()

        # Get key name if possible
        key_name = "Unknown"
        for name in dir(Qt.Key):
            if name.startswith("Key_") and getattr(Qt.Key, name) == key:
                key_name = name
                break

        # Get modifier names
        mod_names = []
        if modifiers & Qt.KeyboardModifier.ShiftModifier:
            mod_names.append("Shift")
        if modifiers & Qt.KeyboardModifier.ControlModifier:
            mod_names.append("Ctrl")
        if modifiers & Qt.KeyboardModifier.AltModifier:
            mod_names.append("Alt")
        if modifiers & Qt.KeyboardModifier.MetaModifier:
            mod_names.append("Meta")
        if modifiers & Qt.KeyboardModifier.KeypadModifier:
            mod_names.append("Keypad")

        mod_str = "+".join(mod_names) if mod_names else "None"

        # Check if this is one of our target keys
        is_target = key in (
            Qt.Key.Key_2,
            Qt.Key.Key_4,
            Qt.Key.Key_6,
            Qt.Key.Key_8,
            Qt.Key.Key_Up,
            Qt.Key.Key_Down,
            Qt.Key.Key_Left,
            Qt.Key.Key_Right,
        )

        msg = f"Key: {key_name} ({key}), Modifiers: {mod_str}"
        if is_target:
            msg = f">>> {msg} <-- TARGET KEY!"

        self.output.append(msg)

        # Don't consume the event
        super().keyPressEvent(event)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    widget = KeyDebugWidget()
    widget.show()
    widget.setFocus()
    sys.exit(app.exec())
