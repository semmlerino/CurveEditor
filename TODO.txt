TODO

Add a context menu for point operations (delete, smooth locally, etc.)
Include numeric steppers alongside text inputs for precise adjustments


--
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
                            QPushButton, QDoubleSpinBox, QCheckBox,
                            QGroupBox, QTabWidget, QComboBox, QListWidget)
from PyQt5.QtCore import Qt, pyqtSignal

class PointEditorPanel(QWidget):
    """Enhanced point editing panel with advanced features."""
    
    # Signals
    pointUpdated = pyqtSignal(int, float, float)  # index, x, y
    pointInterpolationRequested = pyqtSignal(int, int)  # start_idx, end_idx
    pointRemovalRequested = pyqtSignal(int)  # index
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.current_point_index = -1
        self.setup_ui()
        
    def setup_ui(self):
        """Set up the UI components."""
        main_layout = QVBoxLayout(self)
        
        # Create tab widget for different editing modes
        self.tabs = QTabWidget()
        
        # ---- Basic Editing Tab ----
        basic_tab = QWidget()
        basic_layout = QVBoxLayout(basic_tab)
        
        # Point info group
        info_group = QGroupBox("Point Information")
        info_layout = QHBoxLayout(info_group)
        
        self.point_idx_label = QLabel("Point: None")
        self.point_frame_label = QLabel("Frame: N/A")
        
        info_layout.addWidget(self.point_idx_label)
        info_layout.addWidget(self.point_frame_label)
        info_layout.addStretch()
        
        # Coordinate editing group
        coord_group = QGroupBox("Coordinates")
        coord_layout = QHBoxLayout(coord_group)
        
        # X coordinate with precision spinner
        x_layout = QVBoxLayout()
        x_label = QLabel("X:")
        self.x_spin = QDoubleSpinBox()
        self.x_spin.setRange(-10000, 10000)
        self.x_spin.setDecimals(3)
        self.x_spin.setSingleStep(0.1)
        self.x_spin.setMinimumWidth(100)
        
        x_layout.addWidget(x_label)
        x_layout.addWidget(self.x_spin)
        
        # Y coordinate with precision spinner
        y_layout = QVBoxLayout()
        y_label = QLabel("Y:")
        self.y_spin = QDoubleSpinBox()
        self.y_spin.setRange(-10000, 10000)
        self.y_spin.setDecimals(3)
        self.y_spin.setSingleStep(0.1)
        self.y_spin.setMinimumWidth(100)
        
        y_layout.addWidget(y_label)
        y_layout.addWidget(self.y_spin)
        
        # Update button
        self.update_point_btn = QPushButton("Update")
        self.update_point_btn.setEnabled(False)
        
        # Add to coordinate layout
        coord_layout.addLayout(x_layout)
        coord_layout.addLayout(y_layout)
        coord_layout.addWidget(self.update_point_btn)
        coord_layout.addStretch()
        
        # Lock controls
        lock_layout = QHBoxLayout()
        self.lock_x_check = QCheckBox("Lock X")
        self.lock_y_check = QCheckBox("Lock Y")
        
        lock_layout.addWidget(self.lock_x_check)
        lock_layout.addWidget(self.lock_y_check)
        lock_layout.addStretch()
        
        # Add widgets to basic layout
        basic_layout.addWidget(info_group)
        basic_layout.addWidget(coord_group)
        basic_layout.addLayout(lock_layout)
        basic_layout.addStretch()
        
        # ---- Advanced Editing Tab ----
        advanced_tab = QWidget()
        advanced_layout = QVBoxLayout(advanced_tab)
        
        # Point navigation
        nav_group = QGroupBox("Point Navigation")
        nav_layout = QHBoxLayout(nav_group)
        
        self.prev_point_btn = QPushButton("Previous Point")
        self.prev_point_btn.setEnabled(False)
        
        self.next_point_btn = QPushButton("Next Point")
        self.next_point_btn.setEnabled(False)
        
        self.goto_point_label = QLabel("Go to:")
        self.goto_point_spin = QDoubleSpinBox()
        self.goto_point_spin.setRange(0, 9999)
        self.goto_point_spin.setDecimals(0)
        self.goto_point_spin.setEnabled(False)
        
        nav_layout.addWidget(self.prev_point_btn)
        nav_layout.addWidget(self.next_point_btn)
        nav_layout.addWidget(self.goto_point_label)
        nav_layout.addWidget(self.goto_point_spin)
        
        # Point operations
        operations_group = QGroupBox("Point Operations")
        operations_layout = QVBoxLayout(operations_group)
        
        self.delete_point_btn = QPushButton("Delete Current Point")
        self.delete_point_btn.setEnabled(False)
        
        self.interpolate_group = QGroupBox("Interpolate Between Points")
        interpolate_layout = QHBoxLayout(self.interpolate_group)
        
        self.start_point_spin = QDoubleSpinBox()
        self.start_point_spin.setRange(0, 9999)
        self.start_point_spin.setDecimals(0)
        self.start_point_spin.setEnabled(False)
        
        self.end_point_spin = QDoubleSpinBox()
        self.end_point_spin.setRange(0, 9999)
        self.end_point_spin.setDecimals(0)
        self.end_point_spin.setEnabled(False)
        
        self.interpolate_btn = QPushButton("Interpolate")
        self.interpolate_btn.setEnabled(False)
        
        interpolate_layout.addWidget(QLabel("From:"))
        interpolate_layout.addWidget(self.start_point_spin)
        interpolate_layout.addWidget(QLabel("To:"))
        interpolate_layout.addWidget(self.end_point_spin)
        interpolate_layout.addWidget(self.interpolate_btn)
        
        operations_layout.addWidget(self.delete_point_btn)
        operations_layout.addWidget(self.interpolate_group)
        
        # Add widgets to advanced layout
        advanced_layout.addWidget(nav_group)
        advanced_layout.addWidget(operations_group)
        advanced_layout.addStretch()
        
        # ---- Analytics Tab ----
        analytics_tab = QWidget()
        analytics_layout = QVBoxLayout(analytics_tab)
        
        # Point statistics
        stats_group = QGroupBox("Point Statistics")
        stats_layout = QVBoxLayout(stats_group)
        
        self.speed_label = QLabel("Speed: N/A")
        self.acceleration_label = QLabel("Acceleration: N/A")
        self.distance_label = QLabel("Distance from previous: N/A")
        
        stats_layout.addWidget(self.speed_label)
        stats_layout.addWidget(self.acceleration_label)
        stats_layout.addWidget(self.distance_label)
        
        # Problem detection
        problems_group = QGroupBox("Problem Detection")
        problems_layout = QVBoxLayout(problems_group)
        
        self.problem_list = QListWidget()
        self.problem_list.setMaximumHeight(100)
        
        self.jump_to_problem_btn = QPushButton("Jump to Selected Problem")
        self.jump_to_problem_btn.setEnabled(False)
        
        problems_layout.addWidget(self.problem_list)
        problems_layout.addWidget(self.jump_to_problem_btn)
        
        # Add widgets to analytics layout
        analytics_layout.addWidget(stats_group)
        analytics_layout.addWidget(problems_group)
        analytics_layout.addStretch()
        
        # Add tabs to tab widget
        self.tabs.addTab(basic_tab, "Basic Editing")
        self.tabs.addTab(advanced_tab, "Advanced")
        self.tabs.addTab(analytics_tab, "Analytics")
        
        # Add tab widget to main layout
        main_layout.addWidget(self.tabs)
        
        # Connect signals
        self.x_spin.valueChanged.connect(self.on_value_changed)
        self.y_spin.valueChanged.connect(self.on_value_changed)
        self.update_point_btn.clicked.connect(self.on_update_clicked)
        self.delete_point_btn.clicked.connect(self.on_delete_clicked)
        self.interpolate_btn.clicked.connect(self.on_interpolate_clicked)
        
    def set_point(self, index, x, y, frame=None):
        """Set the current point for editing."""
        self.current_point_index = index
        
        # Update UI
        self.point_idx_label.setText(f"Point: {index}")
        if frame is not None:
            self.point_frame_label.setText(f"Frame: {frame}")
        
        # Block signals to prevent triggering valueChanged
        self.x_spin.blockSignals(True)
        self.y_spin.blockSignals(True)
        
        self.x_spin.setValue(x)
        self.y_spin.setValue(y)
        
        self.x_spin.blockSignals(False)
        self.y_spin.blockSignals(False)
        
        # Enable editing controls
        self.update_point_btn.setEnabled(True)
        self.delete_point_btn.setEnabled(True)
        
    def on_value_changed(self):
        """Handle value changes in spinners."""
        # Enable update button when values change
        if self.current_point_index >= 0:
            self.update_point_btn.setEnabled(True)
    
    def on_update_clicked(self):
        """Handle update button click."""
        if self.current_point_index >= 0:
            x = self.x_spin.value()
            y = self.y_spin.value()
            self.pointUpdated.emit(self.current_point_index, x, y)
    
    def on_delete_clicked(self):
        """Handle delete button click."""
        if self.current_point_index >= 0:
            self.pointRemovalRequested.emit(self.current_point_index)
    
    def on_interpolate_clicked(self):
        """Handle interpolate button click."""
        start_idx = int(self.start_point_spin.value())
        end_idx = int(self.end_point_spin.value())
        self.pointInterpolationRequested.emit(start_idx, end_idx)