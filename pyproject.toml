[project]
name = "curveeditor"
version = "1.0.0"
description = "Python/PySide6 application for editing animation curves with multi-curve tracking"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    # Core GUI Framework
    "PySide6>=6.4.0,<7.0.0",

    # Type extensions
    "typing-extensions>=4.0.0",

    # Image Processing
    "Pillow>=10.0.0",
    "numpy>=1.24.0",
    "imageio>=2.31.0",

    # EXR Support
    "OpenEXR>=3.0.0",
]

[dependency-groups]
dev = [
    # Testing
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-qt>=4.0.0",
    "pytest-timeout>=2.0.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.0.0",
    "psutil>=5.0.0", # Performance monitoring for tests
    # Code Quality
    "ruff>=0.12.0",
    "basedpyright>=1.0.0",
    # Pre-commit
    "pre-commit>=3.0.0",
    # Type stubs
    "PySide6-stubs>=6.7.0",
    "pytest-pystack>=1.0.2",
    "pytest-xdist>=3.8.0",
]

[tool.uv]
package = false  # CurveEditor is an application, not a distributable package

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
# Exclude archive and obsolete directories from linting
extend-exclude = [
    "docs/ObsoleteArchive/",
    "docs/archive_2025_01_28/",
    "**/archive/",
    "**/obsolete/",
    "**/Archive/",
    "**/Obsolete/",
    "venv/",
    "node_modules/",
    "**/__pycache__/",
    "**/.pytest_cache/",
    "**/.mypy_cache/",
    "*.txt",
    "*.md",
    "*.bat",
    "*.sh",
    "footage/",
    "LogicExamples/",  # Python 2 reference code from 3DEqualizer
    "fix_test_annotations.py",  # Utility script
    "analyze_handlers.py",  # Utility script
    "bundle_app.py",  # Utility script
    "count_mocks.py",  # Utility script
]

# Set the maximum line length
line-length = 120

# Python version target
target-version = "py312"

[tool.ruff.lint]
# Enable common linting rules
select = [
    "E",     # pycodestyle errors
    "F",     # pyflakes
    "W",     # pycodestyle warnings
    "I",     # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "B",     # flake8-bugbear (catches common bugs)
    "C4",    # flake8-comprehensions (better list/dict comprehensions)
    "SIM",   # flake8-simplify (simplification suggestions)
    "RUF",   # Ruff-specific rules
    "PERF",  # Performance anti-patterns
    "PT",    # pytest style
    "ARG",   # flake8-unused-arguments (catch unused parameters)
    "ERA",   # eradicate (find commented-out code)
    "PIE",   # flake8-pie (misc linting improvements)
    "T20",   # flake8-print (catch leftover print statements)
]

# Ignore specific rules
ignore = [
    "E501",  # line too long (handled by formatter)
    "N802",  # function name should be lowercase (Qt override methods)
    "N815",  # variable in class scope should not be mixedCase (Qt properties)
    "T201",  # print found (intentional for debug/benchmarks)
    "ARG001",  # unused function argument (Qt callbacks require specific signatures)
    "ARG002",  # unused method argument (Qt signals/slots require specific signatures)
    "ARG005",  # unused lambda argument (Qt signal callbacks often unused)
    "ERA001",  # commented-out code (often intentional for documentation)
]

[tool.ruff.lint.per-file-ignores]
# Qt requires specific method names for overrides
"**/*.py" = ["N802", "N815"]  # Allow Qt method names and properties

[tool.pytest.ini_options]
# Test discovery patterns
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

# Test output options
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "-p", "no:cacheprovider",
]

# Timeout for tests (in seconds)
timeout = 60

# Markers
markers = [
    "qt_required: Tests that require Qt/QApplication to be initialized",
    "skip_qt_cleanup: Tests that should skip automatic Qt cleanup",
    "slow: Tests that take a long time to run",
    "integration: Integration tests",
    "unit: Unit tests (no Qt dependencies, fast execution)",
    "production: Production workflow simulation tests (realistic user interactions)",
    "performance: Performance and benchmark tests",
    "benchmark: Specific benchmark tests for performance comparison",
]

# Qt specific settings
qt_api = "pyside6"

# Test paths
testpaths = ["tests"]

# Minimum Python version
minversion = "3.8"

[tool.basedpyright]
# Consolidated type checking configuration
typeCheckingMode = "recommended"
pythonVersion = "3.12"
pythonPlatform = "Linux"
venvPath = "."
venv = "venv"
# stubPath = "./typings"  # Disabled - directory not needed
useLibraryCodeForTypes = true

# Include only production code and tests directories
include = ["core", "data", "io_utils", "rendering", "services", "stores", "tests", "ui", "main.py"]

# Exclude legacy, profiling, and utility scripts
exclude = [
    "**/build",
    "**/venv",
    "**/.mypy_cache",
    "**/node_modules",
    "**/__pycache__",
    "LogicExamples",
    "profiling",
    "tools",
    "SetTrackingBwd.py",
    "SetTrackingFwd.py",
    "SetTrackingFwdBwd.py",
    "test_zoom_bug_fix.py",
    "analyze_handlers.py",
    "bundle_app.py",
    "count_mocks.py",
    "fix_test_annotations.py",
    "test_quick_check.py",
]

# Untyped library allowances
allowedUntypedLibraries = ["numpy", "pytest"]

# Error level settings
reportMissingImports = "warning"
reportMissingTypeStubs = "none"
reportUndefinedVariable = "error"
reportOptionalMemberAccess = "error"  # Phase 1: Stricter None checking
reportOptionalCall = "error"  # Phase 1: Stricter None checking
reportUnusedImport = "warning"
reportUnusedVariable = "warning"
reportImplicitStringConcatenation = "error"  # STRICTER: Prevent bug-prone implicit concatenation
reportDeprecated = "warning"
reportUnnecessaryTypeIgnoreComment = "error"  # STRICTER: Clean up unnecessary ignores
reportUnnecessaryIsInstance = "error"  # STRICTER: Catch always-true isinstance checks
reportUnusedExpression = "warning"  # Catch unused expression results

# Strictness settings (balanced approach)
reportExplicitAny = "warning"
reportAny = "none"
reportUnannotatedClassAttribute = "warning"  # STRICTER: Require type hints on class attributes
reportUnknownParameterType = "none"
reportUnknownVariableType = "none"
reportUnknownMemberType = "none"
reportUnknownArgumentType = "none"
reportUnknownLambdaType = "none"
reportMissingParameterType = "warning"
reportMissingTypeArgument = "error"  # STRICTER: Require list[str] not bare list

# Code quality
reportPrivateUsage = "error"  # STRICTER: Enforce proper API boundaries
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "error"  # STRICTER: Catch logic bugs
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportOverlappingOverload = "warning"
reportUninitializedInstanceVariable = "warning"
reportIgnoreCommentWithoutRule = "error"
reportPrivateImportUsage = "warning"
reportUnusedCallResult = "none"
reportUnusedParameter = "warning"
reportUnreachable = "warning"
reportRedeclaration = "warning"
